script#vertex-shader(type="no-js").
	uniform float offset;
	#define PI 3.14159265359
	#define PI2 6.28318530718
	#define PI_HALF 1.5707963267949
	#define RECIPROCAL_PI 0.31830988618
	#define RECIPROCAL_PI2 0.15915494
	#define LOG2 1.442695
	#define EPSILON 1e-6
	#define saturate(a) clamp( a, 0.0, 1.0 )
	#define whiteCompliment(a) ( 1.0 - saturate( a ) )
	float pow2( const in float x ) { return x*x; }
	float pow3( const in float x ) { return x*x*x; }
	float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
	float average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }
	highp float rand( const in vec2 uv ) {
		const highp float a = 12.9898, b = 78.233, c = 43758.5453;
		highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
		return fract(sin(sn) * c);
	}
	struct IncidentLight {
		vec3 color;
		vec3 direction;
		bool visible;
	};
	struct ReflectedLight {
		vec3 directDiffuse;
		vec3 directSpecular;
		vec3 indirectDiffuse;
		vec3 indirectSpecular;
	};
	struct GeometricContext {
		vec3 position;
		vec3 normal;
		vec3 viewDir;
	};
	vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
		return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
	}
	vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
		return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
	}
	vec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {
		float distance = dot( planeNormal, point - pointOnPlane );
		return - distance * planeNormal + point;
	}
	float sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {
		return sign( dot( point - pointOnPlane, planeNormal ) );
	}
	vec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {
		return lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;
	}
	mat3 transpose( const in mat3 v ) {
		mat3 tmp;
		tmp[0] = vec3(v[0].x, v[1].x, v[2].x);
		tmp[1] = vec3(v[0].y, v[1].y, v[2].y);
		tmp[2] = vec3(v[0].z, v[1].z, v[2].z);
		return tmp;
	}

	#ifdef USE_SKINNING
		uniform mat4 bindMatrix;
		uniform mat4 bindMatrixInverse;
		#ifdef BONE_TEXTURE
			uniform sampler2D boneTexture;
			uniform int boneTextureWidth;
			uniform int boneTextureHeight;
			mat4 getBoneMatrix( const in float i ) {
				float j = i * 4.0;
				float x = mod( j, float( boneTextureWidth ) );
				float y = floor( j / float( boneTextureWidth ) );
				float dx = 1.0 / float( boneTextureWidth );
				float dy = 1.0 / float( boneTextureHeight );
				y = dy * ( y + 0.5 );
				vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );
				vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );
				vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );
				vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );
				mat4 bone = mat4( v1, v2, v3, v4 );
				return bone;
			}
		#else
			uniform mat4 boneMatrices[ MAX_BONES ];
			mat4 getBoneMatrix( const in float i ) {
				mat4 bone = boneMatrices[ int(i) ];
				return bone;
			}
		#endif
	#endif

	//NOISE SETTINGS
	attribute vec3 position2;

	uniform float time;
	uniform float ease_time;
	uniform float ease_time_max;
	uniform float radius;
	uniform float noise_a;
	uniform float noise_x;
	uniform float noise_y;
	uniform float noise_z;
	uniform float plane_noise_a;
	uniform float plane_noise_z;
	uniform float plane_noise_y;

	varying vec4 vPosition;
	varying vec2 vUv;
	varying mat4 vInvertMatrix;
	float inverse(float m) {
	return 1.0 / m;
	}

	mat2 inverse(mat2 m) {
	return mat2(m[1][1],-m[0][1],
	-m[1][0], m[0][0]) / (m[0][0]*m[1][1] - m[0][1]*m[1][0]);
	}

	mat3 inverse(mat3 m) {
	float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2];
	float a10 = m[1][0], a11 = m[1][1], a12 = m[1][2];
	float a20 = m[2][0], a21 = m[2][1], a22 = m[2][2];

	float b01 = a22 * a11 - a12 * a21;
	float b11 = -a22 * a10 + a12 * a20;
	float b21 = a21 * a10 - a11 * a20;

	float det = a00 * b01 + a01 * b11 + a02 * b21;

	return mat3(b01, (-a22 * a01 + a02 * a21), (a12 * a01 - a02 * a11),
	b11, (a22 * a00 - a02 * a20), (-a12 * a00 + a02 * a10),
	b21, (-a21 * a00 + a01 * a20), (a11 * a00 - a01 * a10)) / det;
	}

	mat4 inverse(mat4 m) {
	float
	a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],
	a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],
	a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],
	a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],

	b00 = a00 * a11 - a01 * a10,
	b01 = a00 * a12 - a02 * a10,
	b02 = a00 * a13 - a03 * a10,
	b03 = a01 * a12 - a02 * a11,
	b04 = a01 * a13 - a03 * a11,
	b05 = a02 * a13 - a03 * a12,
	b06 = a20 * a31 - a21 * a30,
	b07 = a20 * a32 - a22 * a30,
	b08 = a20 * a33 - a23 * a30,
	b09 = a21 * a32 - a22 * a31,
	b10 = a21 * a33 - a23 * a31,
	b11 = a22 * a33 - a23 * a32,

	det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

	return mat4(
		a11 * b11 - a12 * b10 + a13 * b09,
		a02 * b10 - a01 * b11 - a03 * b09,
		a31 * b05 - a32 * b04 + a33 * b03,
		a22 * b04 - a21 * b05 - a23 * b03,
		a12 * b08 - a10 * b11 - a13 * b07,
		a00 * b11 - a02 * b08 + a03 * b07,
		a32 * b02 - a30 * b05 - a33 * b01,
		a20 * b05 - a22 * b02 + a23 * b01,
		a10 * b10 - a11 * b08 + a13 * b06,
		a01 * b08 - a00 * b10 - a03 * b06,
		a30 * b04 - a31 * b02 + a33 * b00,
		a21 * b02 - a20 * b04 - a23 * b00,
		a11 * b07 - a10 * b09 - a12 * b06,
		a00 * b09 - a01 * b07 + a02 * b06,
		a31 * b01 - a30 * b03 - a32 * b00,
		a20 * b03 - a21 * b01 + a22 * b00) / det;
	}

	//
	// GLSL textureless classic 3D noise "cnoise",
	// with an RSL-style periodic variant "pnoise".
	// Author:  Stefan Gustavson (stefan.gustavson@liu.se)
	// Version: 2011-10-11
	//
	// Many thanks to Ian McEwan of Ashima Arts for the
	// ideas for permutation and gradient selection.
	//
	// Copyright (c) 2011 Stefan Gustavson. All rights reserved.
	// Distributed under the MIT license. See LICENSE file.
	// https://github.com/ashima/webgl-noise
	//

	vec3 mod289(vec3 x)
	{
	return x - floor(x * (1.0 / 289.0)) * 289.0;
	}

	vec4 mod289(vec4 x)
	{
	return x - floor(x * (1.0 / 289.0)) * 289.0;
	}

	vec4 permute(vec4 x)
	{
	return mod289(((x*34.0)+1.0)*x);
	}

	vec4 taylorInvSqrt(vec4 r)
	{
	return 1.79284291400159 - 0.85373472095314 * r;
	}

	vec3 fade(vec3 t) {
	return t*t*t*(t*(t*6.0-15.0)+10.0);
	}

	// Classic Perlin noise
	float cnoise(vec3 P)
	{
	vec3 Pi0 = floor(P); // Integer part for indexing
	vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1
	Pi0 = mod289(Pi0);
	Pi1 = mod289(Pi1);
	vec3 Pf0 = fract(P); // Fractional part for interpolation
	vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0
	vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
	vec4 iy = vec4(Pi0.yy, Pi1.yy);
	vec4 iz0 = Pi0.zzzz;
	vec4 iz1 = Pi1.zzzz;

	vec4 ixy = permute(permute(ix) + iy);
	vec4 ixy0 = permute(ixy + iz0);
	vec4 ixy1 = permute(ixy + iz1);

	vec4 gx0 = ixy0 * (1.0 / 7.0);
	vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;
	gx0 = fract(gx0);
	vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
	vec4 sz0 = step(gz0, vec4(0.0));
	gx0 -= sz0 * (step(0.0, gx0) - 0.5);
	gy0 -= sz0 * (step(0.0, gy0) - 0.5);

	vec4 gx1 = ixy1 * (1.0 / 7.0);
	vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;
	gx1 = fract(gx1);
	vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
	vec4 sz1 = step(gz1, vec4(0.0));
	gx1 -= sz1 * (step(0.0, gx1) - 0.5);
	gy1 -= sz1 * (step(0.0, gy1) - 0.5);

	vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);
	vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);
	vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);
	vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);
	vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);
	vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);
	vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);
	vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);

	vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));
	g000 *= norm0.x;
	g010 *= norm0.y;
	g100 *= norm0.z;
	g110 *= norm0.w;
	vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));
	g001 *= norm1.x;
	g011 *= norm1.y;
	g101 *= norm1.z;
	g111 *= norm1.w;

	float n000 = dot(g000, Pf0);
	float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
	float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
	float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
	float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
	float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
	float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
	float n111 = dot(g111, Pf1);

	vec3 fade_xyz = fade(Pf0);
	vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
	vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
	float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);
	return 2.2 * n_xyz;
	}

	float circularInOut(float t) {
	return t < 0.5
	? 0.5 * (1.0 - sqrt(1.0 - 4.0 * t * t))
	: 0.5 * (sqrt((3.0 - 2.0 * t) * (2.0 * t - 1.0)) + 1.0);
	}

	mat4 rotateMatrixX(float radian) {
	return mat4(
	1.0, 0.0, 0.0, 0.0,
	0.0, cos(radian), -sin(radian), 0.0,
	0.0, sin(radian), cos(radian), 0.0,
	0.0, 0.0, 0.0, 1.0
	);
	}

	mat4 rotateMatrixY(float radian) {
	return mat4(
	cos(radian), 0.0, sin(radian), 0.0,
	0.0, 1.0, 0.0, 0.0,
	-sin(radian), 0.0, cos(radian), 0.0,
	0.0, 0.0, 0.0, 1.0
	);
	}

	mat4 rotateMatrixZ(float radian) {
	return mat4(
	cos(radian), -sin(radian), 0.0, 0.0,
	sin(radian), cos(radian), 0.0, 0.0,
	0.0, 0.0, 1.0, 0.0,
	0.0, 0.0, 0.0, 1.0
	);
	}

	mat4 rotateMatrix(float radian_x, float radian_y, float radian_z) {
	return rotateMatrixX(radian_x) * rotateMatrixY(radian_y) * rotateMatrixZ(radian_z);
	}

	mat4 scaleMatrix(vec3 scale) {
	return mat4(
	scale.x, 0.0, 0.0, 0.0,
	0.0, scale.y, 0.0, 0.0,
	0.0, 0.0, scale.z, 0.0,
	0.0, 0.0, 0.0, 1.0
	);
	}



	//END NOISE
	void main() {
	float step = circularInOut(clamp(ease_time, 0.0, ease_time_max) / ease_time_max);
	vec3 plane_position = (rotateMatrix(0.0, radians(-90.0), 0.0) * vec4(position2, 1.0)).xyz;
	vec3 ease_position = position * (1.0 - step) + plane_position * step;
	float noise = cnoise(
	vec3(
	ease_position.x * noise_x + time,
	ease_position.y * noise_y + time,
	ease_position.z * noise_z + time
	)
	);
	float noise2 = cnoise(
	vec3(
	ease_position.x + time,
	ease_position.y * plane_noise_y + time,
	ease_position.z * plane_noise_z + time
	)
	);
	mat4 scale_matrix = scaleMatrix(vec3(radius));
	vec4 scale_position = scale_matrix * vec4(ease_position, 1.0);
	vec4 noise_position = vec4(scale_position.xyz + vec3(
	position.x * noise * noise_a * (1.0 - step) + (plane_position.x + plane_noise_a * 2.0) * noise2 * step,
	position.y * noise * noise_a * (1.0 - step),
	position.z * noise * noise_a * (1.0 - step)
	), 1.0);

	vPosition = noise_position;
	vUv = uv;
	vInvertMatrix = inverse(scale_matrix * modelMatrix);	
	vec3 transformed = vec3(position + normal * offset);
	#ifdef USE_SKINNING
		mat4 boneMatX = getBoneMatrix( skinIndex.x );
		mat4 boneMatY = getBoneMatrix( skinIndex.y );
		mat4 boneMatZ = getBoneMatrix( skinIndex.z );
		mat4 boneMatW = getBoneMatrix( skinIndex.w );
	#endif
	#ifdef USE_SKINNING
		// vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
		vec4 skinVertex = bindMatrix * noise_position;
		vec4 skinned = vec4( 0.0 );
		skinned += boneMatX * skinVertex * skinWeight.x;
		skinned += boneMatY * skinVertex * skinWeight.y;
		skinned += boneMatZ * skinVertex * skinWeight.z;
		skinned += boneMatW * skinVertex * skinWeight.w;
		skinned  = bindMatrixInverse * skinned;
	#endif

	#ifdef USE_SKINNING
		vec4 mvPosition = modelViewMatrix * skinned;
	#else
		vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );
	#endif
	gl_Position = projectionMatrix * mvPosition;

	}
